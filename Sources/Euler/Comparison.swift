import Foundation

// MARK: Equality

infix operator ‚©µ : ComparisonPrecedence
func ‚©µ<T: Equatable> (lhs: T, rhs: T) -> Bool {
    return lhs == rhs
}

// MARK: Inequality

infix operator ‚â† : ComparisonPrecedence
func ‚â†<T: Equatable> (lhs: T, rhs: T) -> Bool {
    return lhs != rhs
}

// MARK: Less Than Or Equal To

infix operator ‚â§ : ComparisonPrecedence
func ‚â§<T: Comparable> (lhs: T, rhs: T) -> Bool {
    return lhs <= rhs
}

// MARK: Less Than And Not Equal To

infix operator ‚â® : ComparisonPrecedence
func ‚â®<T: Comparable> (lhs: T, rhs: T) -> Bool {
    return lhs < rhs && lhs != rhs
}

// MARK: Greater Than Or Equal To

infix operator ‚â• : ComparisonPrecedence
func ‚â•<T: Comparable> (lhs: T, rhs: T) -> Bool {
    return lhs >= rhs
}

// MARK: Greater Than And Not Equal To

infix operator ‚â© : ComparisonPrecedence
func ‚â©<T: Comparable> (lhs: T, rhs: T) -> Bool {
    return lhs > rhs && lhs != rhs
}

// MARK: Between

infix operator ‚â¨ : ComparisonPrecedence
func ‚â¨<T: Comparable> (lhs: T, rhs: (T, T)) -> Bool {
    return lhs > rhs.0 && lhs < rhs.1
}

// MARK: Approximate Equality

infix operator ‚âà : ComparisonPrecedence
func ‚âà(lhs: Double, rhs: Double) -> Bool {
    let ùú∫ = 1e-3
    return abs(nextafter(lhs, rhs) - rhs) < ùú∫
}

// MARK: Approximate Inequality

infix operator ‚ââ : ComparisonPrecedence
func ‚ââ(lhs: Double, rhs: Double) -> Bool {
    return !(lhs ‚âà rhs)
}
