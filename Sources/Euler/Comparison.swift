// MARK: Equality

infix operator ‚©µ : ComparisonPrecedence
func ‚©µ<T: Equatable> (left: T, right: T) -> Bool {
    return left == right
}

// MARK: Inequality

infix operator ‚â† : ComparisonPrecedence
func ‚â†<T: Equatable> (left: T, right: T) -> Bool {
    return left != right
}

// MARK: Less Than Or Equal To

infix operator ‚â§ : ComparisonPrecedence
func ‚â§<T: Comparable> (left: T, right: T) -> Bool {
    return left <= right
}

// MARK: Less Than And Not Equal To

infix operator ‚â® : ComparisonPrecedence
func ‚â®<T: Comparable> (left: T, right: T) -> Bool {
    return left < right && left != right
}

// MARK: Greater Than Or Equal To

infix operator ‚â• : ComparisonPrecedence
func ‚â•<T: Comparable> (left: T, right: T) -> Bool {
    return left >= right
}

// MARK: Greater Than And Not Equal To

infix operator ‚â© : ComparisonPrecedence
func ‚â©<T: Comparable> (left: T, right: T) -> Bool {
    return left > right && left != right
}

// MARK: Between

infix operator ‚â¨ : ComparisonPrecedence
func ‚â¨<T: Comparable> (left: T, right: (T, T)) -> Bool {
    return left > right.0 && left < right.1
}

// MARK: Approximate Equality

infix operator ‚âà : ComparisonPrecedence
func ‚âà(left: Double, right: Double) -> Bool {
    let ùú∫ = 1e-3
    return abs(nextafter(left, right) - right) < ùú∫
}

// MARK: Approximate Inequality

infix operator ‚ââ : ComparisonPrecedence
func ‚ââ(left: Double, right: Double) -> Bool {
    return !(left ‚âà right)
}
